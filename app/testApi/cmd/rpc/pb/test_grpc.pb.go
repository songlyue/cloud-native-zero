// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/test.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestRpc_Test_FullMethodName = "/pb.TestRpc/Test"
)

// TestRpcClient is the client API for TestRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestRpcClient interface {
	Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
}

type testRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTestRpcClient(cc grpc.ClientConnInterface) TestRpcClient {
	return &testRpcClient{cc}
}

func (c *testRpcClient) Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := c.cc.Invoke(ctx, TestRpc_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRpcServer is the server API for TestRpc service.
// All implementations must embed UnimplementedTestRpcServer
// for forward compatibility
type TestRpcServer interface {
	Test(context.Context, *TestReq) (*TestResp, error)
	mustEmbedUnimplementedTestRpcServer()
}

// UnimplementedTestRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTestRpcServer struct {
}

func (UnimplementedTestRpcServer) Test(context.Context, *TestReq) (*TestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTestRpcServer) mustEmbedUnimplementedTestRpcServer() {}

// UnsafeTestRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestRpcServer will
// result in compilation errors.
type UnsafeTestRpcServer interface {
	mustEmbedUnimplementedTestRpcServer()
}

func RegisterTestRpcServer(s grpc.ServiceRegistrar, srv TestRpcServer) {
	s.RegisterService(&TestRpc_ServiceDesc, srv)
}

func _TestRpc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestRpc_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).Test(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestRpc_ServiceDesc is the grpc.ServiceDesc for TestRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TestRpc",
	HandlerType: (*TestRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestRpc_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/test.proto",
}
