// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/logx"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		BatchInsert(pages []*User, ctx context.Context, session sqlx.Session) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		UpdateByFiled(ctx context.Context, session sqlx.Session, updateFiled map[string]interface{}, conditionFiled map[string]interface{}) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
		DeleteByField(ctx context.Context, conditionMap map[string]interface{}, session sqlx.Session) (result sql.Result, err error)
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id   int64  `db:"id"` // 主键
		Name string `db:"name"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) DeleteByField(ctx context.Context, conditionMap map[string]interface{}, session sqlx.Session) (result sql.Result, err error) {
	builder := squirrel.Delete(m.table).Where(conditionMap)
	query, arg, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	if session != nil {
		return session.ExecCtx(ctx, query, arg...)
	}
	return m.conn.ExecCtx(ctx, query, arg...)

}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {

	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Id, data.Name)
	}
	return m.conn.ExecCtx(ctx, query, data.Id, data.Name)
}

// export logic
func (m *defaultUserModel) BatchInsert(pages []*User, ctx context.Context, session sqlx.Session) (sql.Result, error) {
	insertBuilder := squirrel.Insert(m.table).Columns(userRowsExpectAutoSet)
	for _, data := range pages {
		insertBuilder = insertBuilder.Values(data.Id, data.Name)
	}
	toSql, args, err := insertBuilder.ToSql()
	if err != nil {
		return nil, err
	}
	if session != nil {
		return session.ExecCtx(ctx, toSql, args...)
	}
	return m.conn.ExecCtx(ctx, toSql, args...)
}

func (m *defaultUserModel) Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Name, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Name, data.Id)
}

// export logic
func (m *defaultUserModel) UpdateByFiled(ctx context.Context, session sqlx.Session, updateFiled map[string]interface{}, conditionFiled map[string]interface{}) (sql.Result, error) {
	updateBuilder := squirrel.Update(m.table).SetMap(updateFiled)

	for key, value := range conditionFiled {
		updateBuilder = updateBuilder.Where(squirrel.Eq{key: value})
	}
	query, arg, err := updateBuilder.ToSql()
	logx.Debugf("updateBuilder:%v", query)
	if err != nil {
		return nil, err
	}
	if session != nil {
		return session.ExecCtx(ctx, query, arg...)
	}
	return m.conn.Exec(query, arg...)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
